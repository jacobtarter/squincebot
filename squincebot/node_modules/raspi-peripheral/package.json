{
  "_args": [
    [
      {
        "raw": "raspi-peripheral@^1.4.0",
        "scope": null,
        "escapedName": "raspi-peripheral",
        "name": "raspi-peripheral",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/var/www/html/squincebot/node_modules/raspi-sonar"
    ]
  ],
  "_from": "raspi-peripheral@>=1.4.0 <2.0.0",
  "_id": "raspi-peripheral@1.6.4",
  "_inCache": true,
  "_location": "/raspi-peripheral",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/raspi-peripheral-1.6.4.tgz_1485119934586_0.6134995194151998"
  },
  "_npmUser": {
    "name": "nebrius",
    "email": "bryan@nebri.us"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "raspi-peripheral@^1.4.0",
    "scope": null,
    "escapedName": "raspi-peripheral",
    "name": "raspi-peripheral",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/raspi-sonar"
  ],
  "_resolved": "https://registry.npmjs.org/raspi-peripheral/-/raspi-peripheral-1.6.4.tgz",
  "_shasum": "e81420297ecbfbcc21a7c4a137143e293e0635cd",
  "_shrinkwrap": null,
  "_spec": "raspi-peripheral@^1.4.0",
  "_where": "/var/www/html/squincebot/node_modules/raspi-sonar",
  "author": {
    "name": "Bryan Hughes",
    "email": "bryan@nebri.us"
  },
  "bugs": {
    "url": "https://github.com/nebrius/raspi-peripheral/issues"
  },
  "dependencies": {
    "raspi-board": "^4.0.1"
  },
  "description": "Provides a base class and pin management functions for the Raspi.js library suite",
  "devDependencies": {
    "@types/node": "0.0.2",
    "jasmine-node": "^1.14.5",
    "tslint": "^4.0.2",
    "typescript": "^2.0.10"
  },
  "directories": {},
  "dist": {
    "shasum": "e81420297ecbfbcc21a7c4a137143e293e0635cd",
    "tarball": "https://registry.npmjs.org/raspi-peripheral/-/raspi-peripheral-1.6.4.tgz"
  },
  "gitHead": "751365e1721205101647c0a7f6bb7be1574ce712",
  "homepage": "https://github.com/nebrius/raspi-peripheral",
  "keywords": [
    "nodebots",
    "robotics",
    "raspberry pi"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "nebrius",
      "email": "bryan@theoreticalideations.com"
    }
  ],
  "name": "raspi-peripheral",
  "optionalDependencies": {},
  "readme": "Raspi Peripheral\n================\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/nebrius/raspi-io?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nRaspi Peripheral is part of the [Raspi.js suite](https://github.com/nebrius/raspi) and provides the base class for other Raspi peripherals. Peripherals for use within the Raspi ecosystem should extend this base class. This class provides management of pins and ensures that only one peripheral can be active on any given pin at one time.\n\nIf you have a bug report, feature request, or wish to contribute code, please be sure to check out the Raspi-IO [Contributing Guide](https://github.com/nebrius/raspi-io/blob/master/CONTRIBUTING.md), which also applies to this project.\n\n**Warning:** This package is not intended to be used directly!\n\n**Note:** this project is written in [TypeScript](http://www.typescriptlang.org/) and includes type definitions in the package.json file. This means that if you want to use it from TypeScript, you don't need to install a separate @types module.\n\n## Example\n\n```JavaScript\nimport { Peripheral } from 'raspi-peripheral';\n\nclass MyPeripheral extends Peripheral {\n  write(value) {\n    if (this.alive) {\n      // Do stuff\n    }\n  }\n}\n```\n\nRaspi Peripheral is written in TypeScript, so writing your peripheral in TypeScript or ECMAScript 2015 is easiest, but you can also do it in ECMAScript 5:\n\n```JavaScript\nvar Peripheral = require('raspi-peripheral').Peripheral;\n\nfunction MyPeripheral(pin) {\n  Peripheral.call(this, pin);\n}\nutil.inherits(MyPeripheral, Peripheral);\n\nMyPeripheral.prototype.write = function(value) {\n  if (this.alive) {\n    // Do stuff\n  }\n};\n```\n\n## Pin Naming\n\nThe pins on the Raspberry Pi are a little complicated. There are multiple headers on some Raspberry Pis with extra pins, and the pin numbers are not consistent between Raspberry Pi board versions.\n\nTo help make it easier, you can specify pins in three ways. The first is to specify the pin by function, e.g. ```'GPIO18'```. The second way is to specify by pin number, which is specified in the form \"P[header]-[pin]\", e.g. ```'P1-7'```. The final way is specify the [Wiring Pi virtual pin number](http://wiringpi.com/pins/), e.g. ```7```. If you specify a number instead of a string, it is assumed to be a Wiring Pi number.\n\nBe sure to read the [full list of pins](https://github.com/nebrius/raspi-io/wiki/Pin-Information) on the supported models of the Raspberry Pi.\n\n## API\n\n### new Peripheral(pins)\n\nThe base constructor must be called with a single argument, the pin or pins to use. If a number or string is passed in, it is assumed to be a single pin. If an array is passed in, each entry in the array is assumed to be a single pin.\n\n### Instance Properties\n\n<table>\n  <thead>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tr>\n    <td>pins</td>\n    <td>Array</td>\n    <td>The pins associated with this peripheral. This value is the normalized Wiring Pi pin number and may not be the same value that was passed to the constructor.</td>\n  </tr>\n  <tr>\n    <td>alive</td>\n    <td>Boolean</td>\n    <td>Whether or not the pin is \"alive\". A pin is considered dead when the application initialized a new peripheral on the same pin as this peripheral. You should always make sure to query \"alive\" before performing any operation.</td>\n  </tr>\n</table>\n\n### Instance Methods\n\n#### destroy()\n\nThis method \"destroys\" the pin. Destroying a pin sets the alive flag to false and emits a \"destroy\" event. The ```destroy``` method is automatically called whenever a new peripheral is initialized over another peripheral.\n\nThis method _does not_ perform any Wiring Pi cleanup. If you need to perform any cleanup in your peripheral code, you should listen for the \"destroy\" event in your peripheral's constructor.\n\nThis method _should not_ be called directly. The Peripheral base class will call this method automatically when a new peripheral is initialized over the old one.\n\n_Arguments_: None\n\n_Returns_: None\n\n#### validateAlive()\n\nThis method checks if the peripheral is alive or not. If the peripheral is not alive, it throws a handy exception.\n\n_Arguments_: None\n\n_Returns_: None\n\n## Example gulpfile for compiling to ECMAScript 6\n\nIf you want to use ECMAScript 6 for your peripheral, here is an example gulpfile:\n\n```JavaScript\nvar gulp = require('gulp');\nvar traceur = require('gulp-traceur');\nvar sourcemaps = require('gulp-sourcemaps');\nvar del = require('del');\n\ngulp.task('default', function() {\n  return gulp.src('index.js')\n    .pipe(sourcemaps.init())\n      .pipe(traceur({\n        modules: 'commonjs'\n      }))\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('lib'));\n});\n\ngulp.task('clean', function(cb) {\n  del(['lib/index.js'], cb);\n});\n```\n\nThis gulpfile assumes you have a single source file called ```index.js```. Note that the traceur runtime is loaded automatically by the Raspi Peripheral module, so there is no need to do it in your module. Make sure to include the four modules required in this file in your package.json's ```dev-dependencies``` section. See the package.json and gulpfile.js file for this module.\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Bryan Hughes bryan@nebri.us\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nebrius/raspi-peripheral.git"
  },
  "scripts": {
    "build": "tsc",
    "prebuild": "tslint src/**/*.ts",
    "test": "jasmine-node test/tests.spec.js"
  },
  "types": "./declarations/index.d.ts",
  "version": "1.6.4"
}
